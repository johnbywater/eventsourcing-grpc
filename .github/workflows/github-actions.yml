name: CI
on: [push, pull_request]

env:
  POETRY_HOME: /home/runner/.local
  POETRY_CACHE_DIR: /home/runner/.local/.cache

jobs:
  prepare:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up cache
        id: cached-dependencies
        uses: actions/cache@v2
        with:
          path: /home/runner/.local
          key: os-${{ matrix.os }}-python-${{ matrix.python-version}}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and set up Poetry
        if: steps.cached-dependencies.outputs.cache-hit != 'true'
        run: make install-poetry
      - name: Install packages
        if: steps.cached-dependencies.outputs.cache-hit != 'true'
        run: make install-packages opts="--no-root"

  lint:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    needs: prepare
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: /home/runner/.local
          key: os-${{ matrix.os }}-python-${{ matrix.python-version}}-${{ hashFiles('**/poetry.lock') }}
      - name: Lint
        run: make lint

  tests:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
#    services:
#      postgres:
#        image: postgres:13.4
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_DB: postgres
#        ports:
#          - "5432:5432"
#        options: >-
#          --health-cmd="POSTGRES_PASSWORD=eventsourcing pg_isready -U eventsourcing -d {{cookiecutter.project_slug}}"
#          --health-interval="10s"
#          --health-timeout="5s"
#          --health-retries="5"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: /home/runner/.local
          key: os-${{ matrix.os }}-python-${{ matrix.python-version}}-${{ hashFiles('**/poetry.lock') }}
      - name: Install root package
        run: make install-packages  # just need 'eventsourcing_grpc' to be importable

#      - name: Setup database
#        run: |
#          PGPASSWORD=postgres psql -c 'CREATE DATABASE {{cookiecutter.project_slug}};' -U postgres -h localhost
#          PGPASSWORD=postgres psql -c "CREATE USER eventsourcing WITH PASSWORD 'eventsourcing';" -U postgres -h localhost
      - name: Generate SSL/TLS certificates
        run: make ssl
      - name: Run tests
        run: make test
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_DB: postgres
#          POSTGRES_HOST: 127.0.0.1
#          POSTGRES_PORT: 5432

  docker:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: /home/runner/.local
          key: os-${{ matrix.os }}-python-${{ matrix.python-version}}-${{ hashFiles('**/poetry.lock') }}
      - name: Install root package
        run: make install-packages  # just need 'eventsourcing_grpc' to be importable

      - name: Generate SSL/TLS certificates
        run: make ssl

      - name: Configure hosts
        run: sudo echo "127.0.0.1 orders" | sudo tee -a /etc/hosts

      - name: Build Python distribution
        run: make python-dist

      - name: Build Docker container image
        run: make container-image

      - name: Start Docker containers
        run: make compose-up

      - name: Run tests
        run: make test-docker

      - name: Stop Docker containers
        run: make compose-down

  kubernetes:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: /home/runner/.local
          key: os-${{ matrix.os }}-python-${{ matrix.python-version}}-${{ hashFiles('**/poetry.lock') }}
      - name: Start minikube
        id: minikube
        uses: medyagh/setup-minikube@master

      - name: Enable ingress addon in minikube
        run: minikube addons enable ingress

      - name: Generate SSL/TLS certificates
        run: make ssl

      - name: Configure hosts
        run: sudo echo "127.0.0.1 orders" | sudo tee -a /etc/hosts

      - name: Build Python distribution
        run: make python-dist

      - name: Build Docker container image in minikube
        run: make minikube-container-image

      - name: Create Kubernetes secrets
        run: make kubernetes-secrets

      - name: Create Kubernetes services
        run: make kubernetes-services

      - name: Create Kubernetes deployments
        run: make kubernetes-deployments

      - name: Wait for services
        run: sleep 10 && kubectl get pods && kubectl get services && kubecrl get ep

      - name: Tunnel to minikube
        run: minikube tunnel &; sleep 10

      - name: Run test
        run: make test-docker
